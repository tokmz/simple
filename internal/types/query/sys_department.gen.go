// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"simple/internal/types/entity"
)

func newDepartment(db *gorm.DB, opts ...gen.DOOption) department {
	_department := department{}

	_department.departmentDo.UseDB(db, opts...)
	_department.departmentDo.UseModel(&entity.Department{})

	tableName := _department.departmentDo.TableName()
	_department.ALL = field.NewAsterisk(tableName)
	_department.ID = field.NewInt64(tableName, "id")
	_department.ParentID = field.NewInt64(tableName, "parent_id")
	_department.Name = field.NewString(tableName, "name")
	_department.Code = field.NewString(tableName, "code")
	_department.Leader = field.NewString(tableName, "leader")
	_department.Phone = field.NewString(tableName, "phone")
	_department.Email = field.NewString(tableName, "email")
	_department.Sort = field.NewInt64(tableName, "sort")
	_department.Status = field.NewInt64(tableName, "status")
	_department.Remark = field.NewString(tableName, "remark")
	_department.CreatedAt = field.NewTime(tableName, "created_at")
	_department.UpdatedAt = field.NewTime(tableName, "updated_at")
	_department.DeletedAt = field.NewField(tableName, "deleted_at")

	_department.fillFieldMap()

	return _department
}

// department 系统部门表
type department struct {
	departmentDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键ID|Primary key
	ParentID  field.Int64  // 父部门ID|Parent department ID
	Name      field.String // 部门名称|Department name
	Code      field.String // 部门编码|Department code
	Leader    field.String // 部门负责人|Department leader
	Phone     field.String // 联系电话|Contact number
	Email     field.String // 邮箱|Email
	Sort      field.Int64  // 排序|Sort
	Status    field.Int64  // 状态 1:启用 2:禁用|Status 1:Enable 2:Disable
	Remark    field.String // 备注|Remark
	CreatedAt field.Time   // 创建时间|Created Time
	UpdatedAt field.Time   // 更新时间|Updated Time
	DeletedAt field.Field  // 删除时间|Deleted Time

	fieldMap map[string]field.Expr
}

func (d department) Table(newTableName string) *department {
	d.departmentDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d department) As(alias string) *department {
	d.departmentDo.DO = *(d.departmentDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *department) updateTableName(table string) *department {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.ParentID = field.NewInt64(table, "parent_id")
	d.Name = field.NewString(table, "name")
	d.Code = field.NewString(table, "code")
	d.Leader = field.NewString(table, "leader")
	d.Phone = field.NewString(table, "phone")
	d.Email = field.NewString(table, "email")
	d.Sort = field.NewInt64(table, "sort")
	d.Status = field.NewInt64(table, "status")
	d.Remark = field.NewString(table, "remark")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")

	d.fillFieldMap()

	return d
}

func (d *department) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *department) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 15)
	d.fieldMap["id"] = d.ID
	d.fieldMap["parent_id"] = d.ParentID
	d.fieldMap["name"] = d.Name
	d.fieldMap["code"] = d.Code
	d.fieldMap["leader"] = d.Leader
	d.fieldMap["phone"] = d.Phone
	d.fieldMap["email"] = d.Email
	d.fieldMap["sort"] = d.Sort
	d.fieldMap["status"] = d.Status
	d.fieldMap["remark"] = d.Remark
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt

}

func (d department) clone(db *gorm.DB) department {
	d.departmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d department) replaceDB(db *gorm.DB) department {
	d.departmentDo.ReplaceDB(db)
	return d
}

type departmentDo struct{ gen.DO }

func (d departmentDo) Debug() *departmentDo {
	return d.withDO(d.DO.Debug())
}

func (d departmentDo) WithContext(ctx context.Context) *departmentDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d departmentDo) ReadDB() *departmentDo {
	return d.Clauses(dbresolver.Read)
}

func (d departmentDo) WriteDB() *departmentDo {
	return d.Clauses(dbresolver.Write)
}

func (d departmentDo) Session(config *gorm.Session) *departmentDo {
	return d.withDO(d.DO.Session(config))
}

func (d departmentDo) Clauses(conds ...clause.Expression) *departmentDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d departmentDo) Returning(value interface{}, columns ...string) *departmentDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d departmentDo) Not(conds ...gen.Condition) *departmentDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d departmentDo) Or(conds ...gen.Condition) *departmentDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d departmentDo) Select(conds ...field.Expr) *departmentDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d departmentDo) Where(conds ...gen.Condition) *departmentDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d departmentDo) Order(conds ...field.Expr) *departmentDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d departmentDo) Distinct(cols ...field.Expr) *departmentDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d departmentDo) Omit(cols ...field.Expr) *departmentDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d departmentDo) Join(table schema.Tabler, on ...field.Expr) *departmentDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d departmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *departmentDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d departmentDo) RightJoin(table schema.Tabler, on ...field.Expr) *departmentDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d departmentDo) Group(cols ...field.Expr) *departmentDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d departmentDo) Having(conds ...gen.Condition) *departmentDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d departmentDo) Limit(limit int) *departmentDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d departmentDo) Offset(offset int) *departmentDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d departmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *departmentDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d departmentDo) Unscoped() *departmentDo {
	return d.withDO(d.DO.Unscoped())
}

func (d departmentDo) Create(values ...*entity.Department) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d departmentDo) CreateInBatches(values []*entity.Department, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d departmentDo) Save(values ...*entity.Department) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d departmentDo) First() (*entity.Department, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Department), nil
	}
}

func (d departmentDo) Take() (*entity.Department, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Department), nil
	}
}

func (d departmentDo) Last() (*entity.Department, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Department), nil
	}
}

func (d departmentDo) Find() ([]*entity.Department, error) {
	result, err := d.DO.Find()
	return result.([]*entity.Department), err
}

func (d departmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Department, err error) {
	buf := make([]*entity.Department, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d departmentDo) FindInBatches(result *[]*entity.Department, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d departmentDo) Attrs(attrs ...field.AssignExpr) *departmentDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d departmentDo) Assign(attrs ...field.AssignExpr) *departmentDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d departmentDo) Joins(fields ...field.RelationField) *departmentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d departmentDo) Preload(fields ...field.RelationField) *departmentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d departmentDo) FirstOrInit() (*entity.Department, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Department), nil
	}
}

func (d departmentDo) FirstOrCreate() (*entity.Department, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Department), nil
	}
}

func (d departmentDo) FindByPage(offset int, limit int) (result []*entity.Department, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d departmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d departmentDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d departmentDo) Delete(models ...*entity.Department) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *departmentDo) withDO(do gen.Dao) *departmentDo {
	d.DO = *do.(*gen.DO)
	return d
}
